#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
#include <functional>
using namespace std;
#define int long long
#define double long double
#define FAST ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define mod 998244353
using namespace __gnu_pbds;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag,tree_order_statistics_node_update> new_data_set;
bool isprime(int num)
	{
    	if(num==1) return true;
    	for(int dhaval = 2;dhaval*dhaval<=num;dhaval++){
    		if(num%dhaval==0) return false;
		}
		return true;
	}
int lcm(int a1,int a2){
	return (a1*a2)/__gcd(a1,a2);
}
int gcd(int b1, int b2) 
{ 
    if (b2 == 0) 
        return b1; 
    return gcd(b2, b1 % b2);  
      
} 
unsigned int factorial(unsigned int num) 
{ 
    if (num == 0) 
    return 1; 
    return num * factorial(num - 1); 
} 
//const int inf=1e17+7;
vector<int>graph[200006];
//int ans=0,child=0;
bool visited[200006]={false};
int dfs(int T){
	visited[T]=true;
	int child = 1;
	for(int dhaval=0;dhaval<graph[T].size();dhaval++){
		if(!visited[graph[T][dhaval]]){
			child+=dfs(graph[T][dhaval]);
		}
	}
	return child;
}
int dsu[100005],s[100005];
int root(int z){
	while(dsu[z]!=z){
		z= dsu[z];
	}
	return z;
}
void uni(int x,int y){
	int p = root(x);
	int q = root(y);
	if(p==q){
		return;
	}
	else{
		if(s[p]<s[q]){
			s[q]+=s[p];
			dsu[p] = q;
		}
		else{
			s[p]+=s[q];
			dsu[q] = p;
		}
	}
}
signed main(){
	FAST
	int tp;
	cin>>tp;
	int temp = tp;
	while(tp--){
		cout<<"Case #"<<temp-tp<<": ";
		int ni;
		cin>>ni;
		vector<pair<int,int>>v,vi;
		map<pair<int,int>,int>mp;
		for(int i=0;i<ni;i++){
			int x,y;
			cin>>x>>y;
			v.push_back({x,y});
			vi.push_back({x,y});
			mp[{x,y}] = i;
		}
		sort(v.begin(),v.end());
		char arr[ni];
		for(int i=0;i<ni;i++){
			arr[i]='J';
		}
		arr[mp[{v[0].first,v[0].second}]]='J';
		int jmx=v[0].second,cmx=0,flag=0,fu=0;
		for(int i=1;i<ni;i++){
			if(v[i].first>=jmx){
				arr[mp[{v[i].first,v[i].second}]]='J';
				jmx = v[i].second;
			}
			else if(fu==0){
				arr[mp[{v[i].first,v[i].second}]]='C';
				cmx = v[i].second;
				fu++;
			}
			else if(v[i].first>=cmx){
				arr[mp[{v[i].first,v[i].second}]]='C';
				cmx = v[i].second;
			}
			else{
				flag++;
				break;
			}
		}
		if(flag!=0){
			cout<<"IMPOSSIBLE"<<endl;
		}
		else{
			for(int i=0;i<ni;i++)cout<<arr[i];
			cout<<endl;
		}
	}
}